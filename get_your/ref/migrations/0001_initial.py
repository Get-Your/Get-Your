# Generated by Django 4.2.23 on 2025-09-03 20:39

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('address1', models.CharField(default='', help_text='House number and street name.', max_length=200, verbose_name='street address')),
                ('address2', models.CharField(blank=True, default='', help_text='Leave blank if not applicable.', max_length=200, verbose_name='apt, suite, etc.')),
                ('city', models.CharField(max_length=64)),
                ('state', models.CharField(default='', max_length=2)),
                ('zip_code', models.DecimalField(decimal_places=0, max_digits=5)),
                ('is_in_gma', models.BooleanField(default=None, null=True)),
                ('is_city_covered', models.BooleanField(default=None, help_text='Designates whether an address is eligible for benefits. This can be altered by administrators if the address is outside the GMA.', null=True)),
                ('has_connexion', models.BooleanField(default=None, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('address_sha1', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='EligibilityProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('program_name', models.CharField(help_text='Program reference name within the platform. Must be lowercase with no spaces.', max_length=40, unique=True)),
                ('ami_threshold', models.DecimalField(decimal_places=2, help_text="Income threshold of the program, as a fraction of AMI (e.g. '0.30' == 30% of AMI)", max_digits=3)),
                ('friendly_name', models.CharField(help_text='The user-friendly name of the program. This will be visible to users on the platform.', max_length=5000)),
                ('friendly_description', models.CharField(help_text='The user-friendly description of the program. This will be visible to users on the platform.', max_length=5000)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the program is in-use or not. Unselect this instead of deleting programs.')),
            ],
            options={
                'verbose_name': 'eligibility program',
                'verbose_name_plural': 'eligibility programs',
            },
        ),
        migrations.CreateModel(
            name='IQProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('program_name', models.CharField(help_text='Program reference name within the platform. Must be lowercase with no spaces.', max_length=40, unique=True)),
                ('ami_threshold', models.DecimalField(decimal_places=2, help_text="Income threshold of the program, as a fraction of AMI (e.g. '0.30' == 30% of AMI).", max_digits=3)),
                ('friendly_name', models.CharField(help_text='The user-friendly name of the program. This will be visible to users on the platform.', max_length=5000)),
                ('friendly_category', models.CharField(help_text='The user-friendly category this program is in. This will be visible to users on the platform.', max_length=5000)),
                ('friendly_description', models.CharField(help_text='The user-friendly description of the program. This will be visible to users on the platform.', max_length=5000)),
                ('friendly_supplemental_info', models.CharField(help_text='Any supplemental information to display to the user.', max_length=5000)),
                ('learn_more_link', models.CharField(help_text='Link for the user to learn more about the program.', max_length=5000)),
                ('friendly_eligibility_review_period', models.CharField(help_text="The estimated time it will take to review a user's application. This will be visible to users on the platform.", max_length=5000)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether the program is in-use or not. Unselect this instead of deleting programs.')),
                ('enable_autoapply', models.BooleanField(default=False, help_text='Designates whether the program should automatically apply new users who are eligible.')),
                ('requires_is_in_gma', models.BooleanField(default=True, help_text="Designates whether the user's eligibility address is required to be in the GMA to be eligible.")),
                ('requires_is_city_covered', models.BooleanField(default=True, help_text="Designates whether the user's eligibility address is required to be 'covered by the City' to be eligible. 'City coverage' is always True for addresses within the GMA, otherwise it's determined by the Get FoCo administrators.")),
                ('renewal_interval_year', models.IntegerField(blank=True, help_text='The frequency at which a user needs to renew their application for this IQ program. Leave blank for a non-renewing (lifetime-enrollment) program.', null=True, verbose_name='renewal interval in years')),
            ],
            options={
                'verbose_name': 'IQ program',
                'verbose_name_plural': 'IQ programs',
            },
        ),
    ]
